/controllers
 /authController
   const User = require('../models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

exports.register = async (req, res) => {
    try {
        const { name, email, password, role } = req.body;
        const existingUser = await User.findOne({ email });
        if (existingUser) return res.status(400).json({ message: 'User already exists' });

        const hashedPassword = await bcrypt.hash(password, 10);

        const user = await User.create({ name, email, password: hashedPassword, role });

        res.status(201).json({ message: 'User registered successfully' });
    } catch (error) {
        res.status(500).json({ message: 'Server error' });
    }
};

exports.login = async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await User.findOne({ email });
        if (!user) return res.status(400).json({ message: 'Invalid credentials' });

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) return res.status(400).json({ message: 'Invalid credentials' });

        const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });

        res.json({ token, user: { id: user._id, name: user.name, role: user.role } });
    } catch (error) {
        res.status(500).json({ message: 'Server error' });
    }
};

 /dashboardController
   // controllers/dashboardController.js

const Property = require('../models/Property');
const Maintenance = require('../models/Maintenance');
const User = require('../models/User');

exports.getOwnerDashboard = async (req, res) => {
    try {
        const ownerId = req.user._id;

        const properties = await Property.find({ owner: ownerId }).populate('tenant', 'name email');

        const rented = properties.filter(p => p.isRented).length;
        const available = properties.length - rented;

        const maintenance = await Maintenance.find({ flat: { $in: properties.map(p => p._id) } });

        res.json({
            properties,
            rented,
            available,
            tenants: properties.map(p => p.tenant).filter(Boolean),
            maintenance
        });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: 'Dashboard error' });
    }
};

exports.getTenantDashboard = async (req, res) => {
    try {
        const tenantId = req.user._id;

        const property = await Property.findOne({ tenant: tenantId });
        const maintenance = await Maintenance.find({ tenant: tenantId });

        res.json({
            property,
            rentAmount: property?.rentAmount,
            maintenance,
        });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: 'Dashboard error' });
    }
};

const Society = require('../models/Society');
const Request = require('../models/Request');

exports.getAdminDashboard = async (req, res) => {
    try {
        const societies = await Society.find();
        const users = await User.find();
        const maintenance = await Maintenance.find();
        const requests = await Request.find();

        const totalDue = maintenance.filter(m => m.status === 'unpaid' || m.status === 'late').length;

        res.json({
            societiesCount: societies.length,
            usersCount: users.length,
            owners: users.filter(u => u.role === 'owner').length,
            tenants: users.filter(u => u.role === 'tenant').length,
            requestsCount: requests.length,
            totalDue
        });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: 'Dashboard error' });
    }
};

 /maintenanceController
   const Maintenance = require('../models/Maintenance');

exports.createMaintenance = async (req, res) => {
    try {
        const { flat, amount, month, dueDate, tenant, society } = req.body;

        const maintenance = await Maintenance.create({
            flat,
            amount,
            month,
            dueDate,
            tenant,
            society,
            status: 'unpaid'
        });

        res.status(201).json(maintenance);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Error creating maintenance' });
    }
};

exports.getMaintenanceByTenant = async (req, res) => {
    try {
        const tenantId = req.user._id;

        const records = await Maintenance.find({ tenant: tenantId })
            .populate('flat', 'title address')
            .populate('society', 'name');

        res.json(records);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Error fetching records' });
    }
};

exports.updatePaymentStatus = async (req, res) => {
    try {
        const { id } = req.params;
        const { status } = req.body;

        const record = await Maintenance.findById(id);
        if (!record) return res.status(404).json({ message: 'Record not found' });

        record.status = status;
        if (status === 'paid') {
            record.paidDate = new Date();
        }

        await record.save();

        res.json({ message: 'Status updated', record });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Error updating status' });
    }
};

 /propertyController
   const Property = require('../models/Property');

exports.createProperty = async (req, res) => {
    try {
        const { title, description, address, rentAmount } = req.body;

        const property = await Property.create({
            title,
            description,
            address,
            rentAmount,
            owner: req.user._id
        });

        res.status(201).json(property);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Server error' });
    }
};

exports.getProperties = async (req, res) => {
    try {
        const { city, minRent, maxRent } = req.query;

        let query = {};

        if (city) {
            query.address = { $regex: city, $options: 'i' }; // case-insensitive
        }

        if (minRent || maxRent) {
            query.rentAmount = {};
            if (minRent) query.rentAmount.$gte = Number(minRent);
            if (maxRent) query.rentAmount.$lte = Number(maxRent);
        }

        const properties = await Property.find(query).populate('owner', 'name email');
        res.json(properties);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Server error' });
    }
};

exports.rentProperty = async (req, res) => {
    try {
        const propertyId = req.params.id;
        const userId = req.user._id;

        const property = await Property.findById(propertyId);

        if (!property) {
            return res.status(404).json({ message: 'Property not found' });
        }

        if (property.isRented) {
            return res.status(400).json({ message: 'Property already rented' });
        }

        property.isRented = true;
        property.tenant = userId;

        await property.save();

        res.status(200).json({ message: 'Property rented successfully', property });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Server error' });
    }
};
exports.getMyProperties = async (req, res) => {
    try {
        const ownerId = req.user._id;

        const properties = await Property.find({ owner: ownerId }).populate('tenant', 'name email');

        res.json(properties);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Server error' });
    }
};

 /societyController
  const Society = require('../models/Society');

exports.createSociety = async (req, res) => {
    try {
        const { name, address } = req.body;

        const society = await Society.create({
            name,
            address,
            admin: req.user._id
        });

        res.status(201).json(society);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Server error' });
    }
};

exports.getMySocieties = async (req, res) => {
    try {
        const societies = await Society.find({ admin: req.user._id });
        res.json(societies);
    } catch (error) {
        res.status(500).json({ message: 'Server error' });
    }
};

 /paymentController
   // controllers/paymentController.js
const Transaction = require('../models/Transaction');
const Property = require('../models/Property');
const Maintenance = require('../models/Maintenance');

exports.payRent = async (req, res) => {
    try {
        const { propertyId, amount } = req.body;
        const userId = req.user._id;

        const property = await Property.findById(propertyId);
        if (!property || !property.tenant.equals(userId)) {
            return res.status(403).json({ message: 'Unauthorized or invalid property' });
        }

        const transaction = await Transaction.create({
            user: userId,
            type: 'rent',
            amount,
            referenceId: propertyId,
        });

        res.json({ message: 'Rent payment recorded', transaction });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Error recording rent payment' });
    }
};

exports.payMaintenance = async (req, res) => {
    try {
        const { maintenanceId, amount } = req.body;
        const userId = req.user._id;

        const maintenance = await Maintenance.findById(maintenanceId);
        if (!maintenance || !maintenance.tenant.equals(userId)) {
            return res.status(403).json({ message: 'Unauthorized or invalid maintenance record' });
        }

        await Maintenance.findByIdAndUpdate(maintenanceId, {
            status: 'paid',
            paidDate: new Date()
        });

        const transaction = await Transaction.create({
            user: userId,
            type: 'maintenance',
            amount,
            referenceId: maintenanceId,
        });

        res.json({ message: 'Maintenance payment recorded', transaction });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Error recording maintenance payment' });
    }
};

exports.getTransactions = async (req, res) => {
    try {
        const userId = req.user._id;

        const transactions = await Transaction.find({ user: userId }).sort({ createdAt: -1 });

        res.json(transactions);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Error fetching transactions' });
    }
};

 /requestController
   const Request = require('../models/Request');

// Create a new maintenance request (tenant)
exports.createRequest = async (req, res) => {
    try {
        const { title, description, flat, society } = req.body;

        const request = await Request.create({
            title,
            description,
            flat,
            society,
            tenant: req.user._id
        });

        res.status(201).json(request);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Error creating request' });
    }
};

// View requests for current tenant
exports.getMyRequests = async (req, res) => {
    try {
        const requests = await Request.find({ tenant: req.user._id })
            .populate('flat', 'title address')
            .populate('society', 'name')
            .sort({ createdAt: -1 });

        res.json(requests);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching requests' });
    }
};

// Admin: View all requests in society
exports.getSocietyRequests = async (req, res) => {
    try {
        const { societyId } = req.params;

        const requests = await Request.find({ society: societyId })
            .populate('tenant', 'name email')
            .populate('flat', 'title address');

        res.json(requests);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching society requests' });
    }
};

// Admin: Update request status
exports.updateRequestStatus = async (req, res) => {
    try {
        const { id } = req.params;
        const { status, feedback, assignedTo } = req.body;

        const request = await Request.findById(id);
        if (!request) return res.status(404).json({ message: 'Request not found' });

        request.status = status;
        request.feedback = feedback || request.feedback;
        request.assignedTo = assignedTo || request.assignedTo;

        if (status === 'resolved') {
            request.resolvedAt = new Date();
        }

        await request.save();
        res.json({ message: 'Request updated', request });
    } catch (error) {
        res.status(500).json({ message: 'Error updating request' });
    }
};


/models
 /User
  const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    role: { type: String, enum: ['owner', 'tenant'], default: 'tenant' }
}, { timestamps: true });

module.exports = mongoose.model('User', userSchema);

 /Transaction
  // models/Transaction.js
const mongoose = require('mongoose');

const transactionSchema = new mongoose.Schema({
    user: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    type: { type: String, enum: ['rent', 'maintenance'], required: true },
    amount: { type: Number, required: true },
    referenceId: { type: mongoose.Schema.Types.ObjectId, required: true }, // propertyId or maintenanceId
    paymentDate: { type: Date, default: Date.now },
    status: { type: String, enum: ['success', 'failed'], default: 'success' },
}, { timestamps: true });

module.exports = mongoose.model('Transaction', transactionSchema);

 /Society
   const mongoose = require('mongoose');

const societySchema = new mongoose.Schema({
    name: { type: String, required: true },
    address: { type: String, required: true },
    admin: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
}, { timestamps: true });

module.exports = mongoose.model('Society', societySchema);

 /Request
   const mongoose = require('mongoose');

const requestSchema = new mongoose.Schema({
    title: { type: String, required: true },                // e.g., "Leaking tap"
    description: { type: String },                          // Optional details
    status: {
        type: String,
        enum: ['pending', 'in-progress', 'resolved'],
        default: 'pending'
    },
    flat: { type: mongoose.Schema.Types.ObjectId, ref: 'Property', required: true },
    tenant: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    society: { type: mongoose.Schema.Types.ObjectId, ref: 'Society', required: true },
    assignedTo: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }, // Admin/staff
    feedback: { type: String },
    resolvedAt: { type: Date }
}, { timestamps: true });

module.exports = mongoose.model('Request', requestSchema);

 /Property
   const mongoose = require('mongoose');

const propertySchema = new mongoose.Schema({
    title: { type: String, required: true },
    description: { type: String },
    society: { type: mongoose.Schema.Types.ObjectId, ref: 'Society', required: true },
    address: { type: String, required: true },
    rentAmount: { type: Number, required: true },
    owner: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    isRented: { type: Boolean, default: false },
    tenant: { type: mongoose.Schema.Types.ObjectId, ref: 'User', default: null },
}, { timestamps: true });

module.exports = mongoose.model('Property', propertySchema);

 /Maintenance
   const mongoose = require('mongoose');

const maintenanceSchema = new mongoose.Schema({
    flat: { type: mongoose.Schema.Types.ObjectId, ref: 'Property', required: true },
    amount: { type: Number, required: true },
    month: { type: String, required: true }, // Example: 'June 2025'
    status: { type: String, enum: ['unpaid', 'paid', 'late'], default: 'unpaid' },
    dueDate: { type: Date, required: true },
    paidDate: { type: Date },
    tenant: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    society: { type: mongoose.Schema.Types.ObjectId, ref: 'Society', required: true }
}, { timestamps: true });

module.exports = mongoose.model('Maintenance', maintenanceSchema);


/routes
 /authRoutes
   const express = require('express');
const { register, login } = require('../controllers/authController');
const router = express.Router();

router.post('/register', register);
router.post('/login', login);

module.exports = router;

 /dashboardRoutes
   const express = require('express');
const router = express.Router();
const { protect } = require('../middleware/authMiddleware');
const {
    getOwnerDashboard,
    getTenantDashboard,
    getAdminDashboard
} = require('../controllers/dashboardController');

router.get('/owner', protect, getOwnerDashboard);
router.get('/tenant', protect, getTenantDashboard);
router.get('/admin', protect, getAdminDashboard);

module.exports = router;

 /maintenanceRoutes
   const express = require('express');
const { protect } = require('../middleware/authMiddleware');
const {
    createMaintenance,
    getMaintenanceByTenant,
    updatePaymentStatus
} = require('../controllers/maintenanceController');

const router = express.Router();

router.post('/', protect, createMaintenance); // Admin use
router.get('/my', protect, getMaintenanceByTenant); // Tenant use
router.put('/:id/status', protect, updatePaymentStatus); // Update paid/late

module.exports = router;

 /propertyRoutes
   const express = require('express');
const { createProperty, getProperties, rentProperty, getMyProperties } = require('../controllers/propertyController');


const { protect } = require('../middleware/authMiddleware');


const router = express.Router();

router.post('/', protect, createProperty);
router.get('/', getProperties);
router.put('/:id/rent', protect, rentProperty);
router.get('/my', protect, getMyProperties);



module.exports = router;

 /societyRoutes
   const express = require('express');
const { protect } = require('../middleware/authMiddleware');
const { createSociety, getMySocieties } = require('../controllers/societyController');

const router = express.Router();

router.post('/', protect, createSociety);
router.get('/my', protect, getMySocieties);

module.exports = router;

 /paymentRoutes
   // routes/paymentRoutes.js
const express = require('express');
const { protect } = require('../middleware/authMiddleware');
const {
    payRent,
    payMaintenance,
    getTransactions
} = require('../controllers/paymentController');

const router = express.Router();

router.post('/rent', protect, payRent);
router.post('/maintenance', protect, payMaintenance);
router.get('/', protect, getTransactions);

module.exports = router;

 /requestRoutes
   const express = require('express');
const { protect } = require('../middleware/authMiddleware');
const {
    createRequest,
    getMyRequests,
    getSocietyRequests,
    updateRequestStatus
} = require('../controllers/requestController');

const router = express.Router();

router.post('/', protect, createRequest); // Tenant creates request
router.get('/my', protect, getMyRequests); // Tenant views their requests
router.get('/society/:societyId', protect, getSocietyRequests); // Admin views all for a society
router.put('/:id/status', protect, updateRequestStatus); // Admin updates request

module.exports = router;
